name: Deploy RedditBot to AWS Lambda

on:
  push:
    branches:
      - main # Or your primary branch, e.g., master
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for AWS OIDC authentication (recommended)
      contents: read # Required to checkout the code

    strategy:
      fail-fast: false # Optional: Set to true if you want the job to stop if one Lambda deployment fails
      matrix:
        lambda:
          - name: PostDetector
            path: post_detector_lambda
            aws_name: RedditBot-Panda # REPLACE with actual AWS Lambda function name
          - name: ReplyHandler
            path: reply_handler_lambda
            aws_name: RedditBot-Panda-Reply # REPLACE with actual AWS Lambda function name

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::409365783261:role/GithubActionsLambdaDeploy
          aws-region: ${{ secrets.AWS_REGION }} # e.g., us-east-1

      - name: Build Lambda deployment package for ${{ matrix.lambda.name }}
        run: |
          LAMBDA_PATH_REL="${{ matrix.lambda.path }}"
          LAMBDA_NAME_FOR_ZIP="${{ matrix.lambda.name }}" # Used for zip file and package dir to keep names simple
          PACKAGE_DIR_NAME="package_${LAMBDA_NAME_FOR_ZIP}" # Temp dir for packaging this specific lambda
          ZIP_FILE_NAME_IN_WORKSPACE="${LAMBDA_NAME_FOR_ZIP}-deployment-package.zip" # Final zip name in github.workspace

          docker run --rm -v "${{ github.workspace }}":/var/task \
          -e LAMBDA_PATH_REL_DOCKER="$LAMBDA_PATH_REL" \
          -e LAMBDA_NAME_DOCKER="$LAMBDA_NAME_FOR_ZIP" \
          -e PACKAGE_DIR_NAME_DOCKER="$PACKAGE_DIR_NAME" \
          -e ZIP_FILE_NAME_DOCKER="$ZIP_FILE_NAME_IN_WORKSPACE" \
          public.ecr.aws/amazonlinux/amazonlinux:2023 /bin/bash -c ' \
            set -e; \
            echo "Running inside Docker for Lambda: ${LAMBDA_NAME_DOCKER}, Source Path: ${LAMBDA_PATH_REL_DOCKER}"; \
            dnf update -y && dnf install -y python3.12 python3.12-pip zip; \
            echo "Build tools installed."; \
            \
            SOURCE_PATH_ABS="/var/task/${LAMBDA_PATH_REL_DOCKER}"; \
            PACKAGE_PATH_ABS="/var/task/${PACKAGE_DIR_NAME_DOCKER}"; \
            ZIP_FILE_PATH_ABS="/var/task/${ZIP_FILE_NAME_DOCKER}"; \
            \
            echo "Creating packaging directory: ${PACKAGE_PATH_ABS}"; \
            mkdir -p "${PACKAGE_PATH_ABS}"; \
            \
            echo "Changing to Lambda source directory: ${SOURCE_PATH_ABS}"; \
            cd "${SOURCE_PATH_ABS}"; \
            \
            echo "Installing requirements from $(pwd)/requirements.txt into ${PACKAGE_PATH_ABS}"; \
            python3.12 -m pip install -r requirements.txt -t "${PACKAGE_PATH_ABS}"; \
            \
            echo "Copying Python files (*.py) from $(pwd) to ${PACKAGE_PATH_ABS}"; \
            cp *.py "${PACKAGE_PATH_ABS}/"; \
            \
            echo "Changing to packaging directory: ${PACKAGE_PATH_ABS}"; \
            cd "${PACKAGE_PATH_ABS}"; \
            \
            echo "Zipping contents into ${ZIP_FILE_PATH_ABS}"; \
            zip -r "${ZIP_FILE_PATH_ABS}" .; \
            \
            echo "Build complete for ${LAMBDA_NAME_DOCKER}. Zip file is at ${ZIP_FILE_PATH_ABS}"; \
            echo "Listing contents of /var/task to show the created zip file:"; \
            ls -l /var/task; \
          '
        env:
          PIP_DISABLE_PIP_VERSION_CHECK: 1
          PIP_NO_CACHE_DIR: "off"

      - name: Deploy ${{ matrix.lambda.name }} to AWS Lambda
        run: |
          aws lambda update-function-code \
            --function-name ${{ matrix.lambda.aws_name }} \
            --zip-file fileb://${{ matrix.lambda.name }}-deployment-package.zip \
            --publish
        env:
          AWS_PAGER: ""
